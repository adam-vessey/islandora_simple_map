<?php

/**
 * @file
 * The main Islandora Simple Map module file.
 */

define('ISLANDORA_SIMPLE_MAP_XPATHS', "//mods:subject/mods:cartographics/mods:coordinates\n//mods:subject/mods:geographic");

/**
 * Implements hook_menu().
 */
function islandora_simple_map_menu() {
  $items = array();
  $items['admin/islandora/tools/islandora_simple_map'] = array(
    'title' => 'Islandora Simple Map',
    'description' => 'Configure the Islandora Simple Map module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_simple_map_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form builder.
 */
function islandora_simple_map_admin_settings() {
  $form = array();
  $form['islandora_simple_map_xpath'] = array(
    '#title' => t('XPath expressions to MODS elements containing map data'),
    '#type' => 'textarea',
    '#default_value' => variable_get('islandora_simple_map_xpath', ISLANDORA_SIMPLE_MAP_XPATHS),
    '#description' => t("Enter one XPath expression per line, in preferred order with the most preferred first. The first data found in the object's MODS datastream by this list of XPath expressions will be used to populate the map."),
  );
  $form['islandora_simple_map_collapsed'] = array(
    '#type' => 'select',
    '#title' => t('Collapse map by default?'),
    '#default_value' => variable_get('islandora_simple_map_collapsed', 'collapsed'),
    '#options' => array(
      'collapsed' => t('Collapsed'),
      '' => t('Expanded'),
    ),
    '#description' => t('Whether or not the fieldset containing the map should be collapsed by default. The user can toggle the collapse.'),
  );
  $form['islandora_simple_map_iframe_width'] = array(
    '#title' => t('Map iframe width'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => variable_get('islandora_simple_map_iframe_width', '600'),
    '#description' => t('The width, in pixels, of the iframe the map will appear in.'),
  );
  $form['islandora_simple_map_iframe_height'] = array(
    '#title' => t('Map iframe height'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => variable_get('islandora_simple_map_iframe_height', '600'),
    '#description' => t('The height, in pixels, of the iframe the map will appear in.'),
  );
  $form['islandora_simple_map_zoom'] = array(
    '#title' => t('Default zoom level'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => variable_get('islandora_simple_map_zoom', '10'),
    '#description' => t('The higher the number, the higher the zoom.'),
  );
  $form['islandora_simple_map_attempt_cleanup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Attempt to clean up map data.'),
    '#default_value' => variable_get('islandora_simple_map_attempt_cleanup', 1),
    '#description' => t('Check this option if you want to clean up data before passing it off to Google Maps. Please consult the README file for more information'),
  );
  $form['islandora_simple_map_google_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google API Key'),
    '#default_value' => variable_get('islandora_simple_map_google_api_key'),
    '#description' => t('Key for access to the API. See <a href="@url">Google documentation</a> for details.', array(
      '@url' => 'https://developers.google.com/maps/documentation/javascript/get-api-key',
    )),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_islandora_simple_map_gather_geojson().
 *
 * Grabs coords from MODS subjects.
 */
function islandora_simple_map_islandora_simple_map_gather_geojson(AbstractObject $object) {
  $xpaths = preg_split('/$\R?^/m', trim(variable_get('islandora_simple_map_xpath', ISLANDORA_SIMPLE_MAP_XPATHS)));
  $found_coords = array();

  if (isset($object['MODS'])) {
    $mods_string = $object['MODS']->content;
    $mods_doc = new DOMDocument();
    $mods_doc->loadXML($mods_string);
    if ($mods_doc) {
      foreach ($xpaths as $xpath) {
        $xpath = trim($xpath);
        if (strlen($xpath)) {
          $mods_xpath = new DOMXPath($mods_doc);
          $mods_xpath->registerNamespace('mods', "http://www.loc.gov/mods/v3");
          $mods_carto_xpath = $mods_xpath->query($xpath);
          if ($mods_carto_xpath->length) {
            // Take the first element found by the current XPath.
            $mods_carto = $mods_carto_xpath->item(0);
            $node_value = $mods_carto->nodeValue;
            if (variable_get('islandora_simple_map_attempt_cleanup', 1)) {
              $node_value = islandora_simple_map_clean_coordinates($node_value);
            }
            if (strlen($node_value)) {
              $found_coords[] = $node_value;
            }
          }
        }
      }
    }
  }

  return array_map(function ($coord) {
    return array(
      'type' => 'Feature',
      'geometry' => array(
        'type' => 'Point',
        'coordinates' => array_reverse(array_map('doubleval', array_map('trim', explode(',', $coord)))),
      ),
    );
  }, $found_coords);
}

/**
 * Helper to invoke hooks to gather GeoJSON info for a given object.
 */
function islandora_simple_map_gather_geojson(AbstractObject $object) {
  $geojson = module_invoke_all('islandora_simple_map_gather_geojson', $object);
  drupal_alter('islandora_simple_map_gather_geojson', $geojson, $object);
  return $geojson;
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_simple_map_islandora_view_object(AbstractObject $object) {
  $mod_path = drupal_get_path('module', 'islandora_simple_map');
  $geojson_info = islandora_simple_map_gather_geojson($object);

  if ($geojson_info) {
    $width = variable_get('islandora_simple_map_iframe_width', '600');
    $height = variable_get('islandora_simple_map_iframe_height', '600');
    $collapsed = variable_get('islandora_simple_map_collapsed', 'collapsed');
    $id = drupal_html_id('islandora_simple_map');
    $renderable = array(
      '#type' => 'markup',
      '#attached' => array(
        'js' => array(
          array(
            'type' => 'setting',
            'data' => array(
              'islandora_simple_map' => array(
                'data' => array(
                  $id => array(
                    'geojson' => array(
                      'type' => 'FeatureCollection',
                      'features' => $geojson_info,
                    ),
                    'zoom' => intval(variable_get('islandora_simple_map_zoom', '10')),
                  ),
                ),
              ),
            ),
          ),
          "$mod_path/js/map.js",
          array(
            'type' => 'external',
            'data' => url('//maps.googleapis.com/maps/api/js', array('query' => array(
              'key' => variable_get('islandora_simple_map_google_api_key'),
              'callback' => 'Drupal.islandora_simple_map.init',
            ))),
            'defer' => TRUE,
          ),
        ),
        'css' => array(
          array(
            'type' => 'inline',
            'data' => "#$id { width: {$width}px; height: {$height}px}"
          ),
        ),
      ),
      '#attributes' => array(
        'id' => $id,
      ),
      '#theme_wrappers' => array('container'),
      '#markup' => t('Map loading...'),
    );

    $fieldset = array(
      '#attached' => array(
        'js' => array(
          'misc/collapse.js',
          'misc/form.js',
        ),
      ),
      '#type' => 'fieldset',
      '#title' => t('Map'),
      '#attributes' => array(
        'class' => array(
          'collapsible',
          $collapsed == 'collapsed' ? 'collapsed' : '',
        ),
      ),
      'map' => $renderable,
    );

    return array(
      'islandora_simple_map' => $fieldset,
    );
  }
}

/**
 * Applies some cleanup on data to make it more reliable for Google Maps.
 *
 * @param string $data
 *    The coordinate data.
 *
 * @return string
 *   The cleaned up data.
 */
function islandora_simple_map_clean_coordinates($data) {
  $data = preg_replace('/;/', ',', $data);
  return $data;
}
